// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/barnettt/banking/domain (interfaces: TransactionRepository)

// Package domain is a generated GoMock package.
package domain

import (
	reflect "reflect"

	domain "github.com/barnettt/banking/domain"
	dto "github.com/barnettt/banking/dto"
	exceptions "github.com/barnettt/banking/exceptions"
	gomock "github.com/golang/mock/gomock"
)

// MockTransactionRepository is a mock of TransactionRepository interface.
type MockTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepositoryMockRecorder
}

// MockTransactionRepositoryMockRecorder is the mock recorder for MockTransactionRepository.
type MockTransactionRepositoryMockRecorder struct {
	mock *MockTransactionRepository
}

// NewMockTransactionRepository creates a new mock instance.
func NewMockTransactionRepository(ctrl *gomock.Controller) *MockTransactionRepository {
	mock := &MockTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepository) EXPECT() *MockTransactionRepositoryMockRecorder {
	return m.recorder
}

// NewTransaction mocks base method.
func (m *MockTransactionRepository) NewTransaction(arg0 domain.Transaction) (*dto.TransactionResponse, *exceptions.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTransaction", arg0)
	ret0, _ := ret[0].(*dto.TransactionResponse)
	ret1, _ := ret[1].(*exceptions.AppError)
	return ret0, ret1
}

// NewTransaction indicates an expected call of NewTransaction.
func (mr *MockTransactionRepositoryMockRecorder) NewTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTransaction", reflect.TypeOf((*MockTransactionRepository)(nil).NewTransaction), arg0)
}
